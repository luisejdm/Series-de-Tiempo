---
title: "Proyecto Final"
author: "David Campos Ambriz - Luis Eduardo Jiménez del Muro - Lenin Adair Quezada Gómez"
date: today
format: 
  html:
    embed-resources: true
    toc: true
    code-link: true
    theme: 
      light: minty
      dark: darkly
---

# Librerías----------------------------------------------------------------------

```{r}
#| message: false

library(tidyverse)
library(fpp3)
library(fable.prophet)
```

# Limpieza de Datos -------------------------------------------------------------

## Importar los datos -----------------------------------------------------------

```{r}
train <- read.csv("train.csv")
oil <- read.csv("oil.csv")
stores <- read.csv("stores.csv")
transactions <- read.csv("transactions.csv")
holidays <- read.csv("holidays_events.csv")
test <- read.csv("test.csv")
```

## Convertir a Tibble-Tsibble ---------------------------------------------------

```{r}
train <- as_tibble(train) |> 
  mutate(date = as.Date(date))

test <- as_tibble(test) |> 
  mutate(date = as.Date(date))

oil <- as_tsibble(oil, index=date) |> 
  mutate(date = as.Date(date))

holidays <- as_tibble(holidays) |> 
  mutate(date = as.Date(date))

stores <- as_tibble(stores)

transactions <- as_tibble(transactions) |> 
  mutate(date = as.Date(date))
```

## Separar ventas por tienda y producto -----------------------------------------

```{r}
# Dividir por tienda
ventas_por_tienda <- train %>%
  group_by(store_nbr) %>%
  group_split() %>%
  set_names(paste("Tienda", train$store_nbr %>% unique()))

# Dividir cada tienda por familia de producto
ventas_por_producto <- ventas_por_tienda %>%
  map(~ .x %>%
        group_by(family) %>%
        group_split() %>%
        set_names(paste(.x$family %>% unique())))
```

### Accesar a cualquier elemento de la lista -------------------------------------

```{r}
seafood_1 <- ventas_por_producto[["Tienda 1"]][["SEAFOOD"]]
seafood_1
```

# Pronósticos del petroleo ------------------------------------------------------
## Separar en datos de entrenamiento --------------------------------------------
```{r}
oil_train <- oil |> 
  filter_index(. ~ "2016-10-01") |> 
  na.omit()

oil_train |> 
  autoplot(dcoilwtico)
```
## Model fitting ----------------------------------------------------------------
```{r}
oil_fit <- oil_train |> 
  model(
    prophet_auto = prophet(dcoilwtico),
    naive = NAIVE(dcoilwtico),
    mean = MEAN(dcoilwtico),
    arima = ARIMA(dcoilwtico),
    ets = ETS(dcoilwtico),
    drift = RW(dcoilwtico)
  )

oil_fit
```

```{r}
accuracy(oil_fit)
```

## Pronósticos en los datos de entrenamiento ------------------------------------

```{r}
oil_fc <- oil_fit |> 
  forecast(h = 340)

oil_fc |> 
  autoplot(oil, level = NULL)

p <- oil_fc |> 
  ggplot(aes(x = date, y = dcoilwtico)) +
  geom_line(data = oil, aes(y = dcoilwtico)) +
  geom_line(aes(color = .model), alpha = 0.5) +
  facet_wrap(~ type, scales = "free_y", ncol = 1)

plotly::ggplotly(p, dynamicTicks = TRUE) |> 
  plotly::rangeslider()
```


